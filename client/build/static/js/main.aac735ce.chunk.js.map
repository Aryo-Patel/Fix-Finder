{"version":3,"sources":["content sync /^/.*$","content/AnimationLibrary.PNG","components/nav/Upload.js","components/nav/Nav.js","components/dashboard/Content.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Upload","props","displayText","useState","imageNames","updateImageNames","useEffect","a","axios","get","images","data","getImages","loggedIn","changeStatus","checkSubmit","passwd","document","getElementById","value","success","console","log","alert","displayStatus","className","method","action","encType","type","name","image","index","key","onClick","body","imageName","target","textContent","post","headers","removeImage","required","Nav","showModal","updateModal","rel","href","Content","i","src","require","Dashboard","App","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aac735ce.chunk.js","sourcesContent":["var map = {\n\t\"./AnimationLibrary.PNG\": 43\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 42;","module.exports = __webpack_public_path__ + \"static/media/AnimationLibrary.333e7274.PNG\";","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nimport axios from 'axios';\r\nconst Upload = props => {\r\n    const [imageNames, updateImageNames] = useState([]);\r\n    useEffect(() => {\r\n        async function getImages() {\r\n            let images = await axios.get('/image-names');\r\n            images = images.data;\r\n            updateImageNames(images);\r\n        }\r\n        getImages();\r\n    }, []);\r\n\r\n    let displayText;\r\n\r\n    const [loggedIn, changeStatus] = useState(false);\r\n    props.displayStatus ? displayText = 'block' : displayText = 'none';\r\n\r\n\r\n    async function checkSubmit() {\r\n        let passwd = document.getElementById('password').value;\r\n\r\n        if (passwd) {\r\n            let success;\r\n            try {\r\n                success = await axios.get('/login/' + passwd);\r\n                success = success.data;\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n\r\n            if (success) {\r\n                changeStatus(true);\r\n            }\r\n            else {\r\n                alert('Invalid credentials');\r\n            }\r\n        }\r\n    }\r\n    function removeImage(e) {\r\n        let fileName = e.target.textContent;\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        const body = {\r\n            imageName: fileName\r\n        }\r\n        console.log(body);\r\n        axios.post('/imagesDel', body, config);\r\n    }\r\n    return (\r\n        <div id=\"modal-div\" className={displayText}>\r\n            <div id=\"content\">\r\n\r\n                {loggedIn ? (\r\n                    <div id=\"upload-content\">\r\n                        <div id=\"upload-file\" className=\"upload-child\">\r\n                            <h1>Upload a file</h1>\r\n                            <form method=\"POST\" action=\"/images\" encType=\"multipart/form-data\">\r\n                                <input type=\"file\" name=\"file\" />\r\n                                <input type=\"submit\" value=\"upload\" />\r\n                            </form>\r\n                        </div>\r\n                        <div id=\"delete-file\" className=\"upload-child\">\r\n                            <h1>Delete an uploaded file</h1>\r\n                            <div id=\"image-names\">\r\n                                {imageNames.map((image, index) => (\r\n                                    <span key={index++} onClick={e => removeImage(e)}>{image}</span>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) :\r\n                    (\r\n                        <div id=\"text-content\">\r\n                            <h1>Login</h1>\r\n                            <div id=\"login\">\r\n                                <div id=\"login-formatter\">\r\n                                    <input id=\"password\" type=\"password\" required />\r\n                                    <small>Password</small>\r\n                                </div>\r\n                                <button id=\"check-password\" onClick={async (e) => await checkSubmit()}>Submit</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    )}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Upload;","import React, { Fragment, useState } from 'react';\r\n\r\nimport Upload from './Upload';\r\nconst Nav = props => {\r\n    const [showModal, updateModal] = useState(false);\r\n    return (\r\n        <Fragment>\r\n            <Upload displayStatus={showModal} />\r\n            <nav id=\"navbar\">\r\n                <div id=\"logo-wrapper\">\r\n                    <div id=\"img-container\"></div>\r\n                    <div id=\"logo-text\">\r\n                        <span id=\"fix\" className=\"logo-span\"\r\n                        ><b>FIX<span id=\"finder\" className=\"logo-span\">FINDER</span></b></span\r\n                        >\r\n                        <small id=\"beta\" className=\"logo-span\">Beta</small>\r\n                    </div>\r\n                </div>\r\n                <div id=\"links-wrapper\">\r\n                    <a className=\"link-item\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fixfinder.com/\" id=\"fixfinder\">FixFinder</a>\r\n                    <a className=\"link-item\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://roadmap.fixfinder.com/\" id=\"roadmap\">Road Map</a>\r\n                    <a className=\"link-item\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://portal.fixfinder.com/login?redirect=%2Fhome\">Portal</a>\r\n                    <span className=\"link-item\" id=\"admin\" onClick={e => updateModal(!showModal)}>Admin Actions</span>\r\n                </div>\r\n            </nav>\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Nav;","import React, { useState, useEffect } from 'react';\r\nimport path from 'path';\r\nimport axios from 'axios';\r\nconst Content = (props) => {\r\n    const [imageNames, updateImageNames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getImages() {\r\n            let images = await axios.get('/image-names');\r\n            images = images.data;\r\n            updateImageNames(images);\r\n        }\r\n        getImages();\r\n    }, [])\r\n    let i = 0;\r\n    return (\r\n        <ul>\r\n            {imageNames.map((imageName) => {\r\n                let imgPath = '../../content/' + imageName;\r\n                return (\r\n                    <li key={i++}>\r\n                        <img key={i++} src={require('../../content/' + imageName)} />\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport Content from './Content';\r\n\r\nimport axios from 'axios';\r\n\r\nconst Dashboard = props => {\r\n    axios.get('/');\r\n    return (\r\n        <main id=\"body\">\r\n            <div id=\"content-wrapper\">\r\n                <div id=\"welcome\">\r\n                    <h1>Welcome to FixFinder Beta</h1>\r\n                    <p>Updates about the project and important release info below</p>\r\n                </div>\r\n                <div id=\"imgs\">\r\n                    <h1>Check out these helpful resources!</h1>\r\n                    <Content />\r\n                </div>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport './styles/styles.css';\n\nimport Nav from './components/nav/Nav';\nimport Dashboard from './components/dashboard/Dashboard';\nfunction App() {\n  document.title = \"Fix Finder Beta\";\n  return (\n    <body>\n      <Nav />\n      <Dashboard />\n    </body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}